---
cspell:
  name: cspell
  preset: cspell
  tags: []
  includes:
    - "**/*"
  check:
    command: "cspell --cache --dot --gitignore --no-must-find-files --relative --show-suggestions --no-progress --no-summary ."
    input: none
    output: stdout
    format: regexp
    mapping:
      pattern: '(?P<file>.*):(?P<line>\d+):(?P<column>\d+)\s-\s(?P<message>.*)'
      level: "error"
      path: '{{ trimPrefix "./" .file }}'
      start_line: "{{ .line }}"
      start_column: "{{ .column }}"
      rule_id: "spelling"
      rule_name: "spelling"
      rule_description: "{{ .message }}"

gitleaks:
  name: "gitleaks"
  preset: "gitleaks"
  tags: []
  includes:
    - "**/*"
  check:
    command: "gitleaks detect --no-banner --no-git --redact --verbose"
    input: none
    output: stdout
    format: regexp
    mapping:
      pattern: '(?m)Secret:\s+(?P<secret>.*)\nRuleID:\s+(?P<rule_id>.*)\nEntropy:\s+(?P<entropy>.*)\nFile:\s+(?P<file>.*)\nLine:\s+(?P<line>.*)'
      level: "error"
      path: "{{ .file }}"
      start_line: "{{ .line }}"
      rule_id: "{{ .rule_id }}"
      rule_name: "{{ .rule_id }}"
      rule_description: "Secret detected"

golangci-lint:
  name: "golangci-lint"
  preset: "golangci-lint"
  tags: []
  includes:
    - "**/*.go"
  check:
    command: "golangci-lint run --out-format=json"
    input: none
    output: stdout
    format: json
    mapping:
      pattern: "Issues"
      level: '{{ .Severity | default "error" }}'
      path: "{{ .Pos.Filename }}"
      start_line: "{{ .Pos.Line }}"
      start_column: "{{ .Pos.Column }}"
      end_line: "0"
      end_column: "0"
      rule_id: "{{ .FromLinter }}"
      rule_name: "{{ .FromLinter }}"
      rule_description: "{{ .Text }}"
      rule_uri: "https://golangci-lint.run/usage/linters/#{{ .FromLinter }}"
      context: '{{ if .SourceLines }}{{ join "\n" .SourceLines }}{{ end }}'
  fix:
    command: "golangci-lint run --fix"
    input: none
    output: stdout
    format: none

gofmt:
  name: gofmt
  preset: gofmt
  tags: []
  includes:
    - "**/*.go"
  check:
    command: "gofmt -d"
    input: variadic
    output: stdout
    format: diff
  fix:
    command: "gofmt -w"
    input: variadic
    output: stdout
    format: none

hadolint:
  name: hadolint
  preset: hadolint
  tags: []
  includes:
    - "**/Dockerfile"
  check:
    command: "hadolint --format=json --no-color"
    input: variadic
    output: stdout
    # Using json (vs. sarif) because the sarif output doesn't include the URL.
    format: json
    mapping:
      level: "{{ .level }}"
      path: "{{ .file }}"
      start_line: "{{ .line }}"
      start_column: "{{ .column }}"
      rule_id: "{{ .code }}"
      rule_name: "{{ .code }}"
      rule_description: "{{ .message }}"
      rule_uri: '{{ if hasPrefix "SC" .code }}https://www.shellcheck.net/wiki/{{ .code }}{{ else }}https://github.com/hadolint/hadolint/wiki/{{ .code }}{{ end }}'

markdownlint:
  name: "markdownlint"
  preset: "markdownlint"
  tags: []
  includes:
    - "**/*.md"
  check:
    command: "markdownlint --json"
    input: variadic
    output: stderr
    format: json
    mapping:
      level: "error"
      path: "{{ .fileName }}"
      start_line: "{{ .lineNumber }}"
      start_column: "{{ if .errorRange }}{{ index .errorRange 0 }}{{ end }}"
      end_line: "{{ .lineNumber }}"
      end_column: "{{ if .errorRange }}{{ add (index .errorRange 0) (index .errorRange 1) }}{{ end }}"
      rule_id: "{{ index .ruleNames 0 }}"
      rule_name: "{{ index .ruleNames 1 }}"
      rule_description: "{{ .ruleDescription }}"
      rule_uri: "{{ .ruleInformation }}"
  fix:
    command: "markdownlint --fix"
    input: variadic
    output: stderr
    format: none

shellcheck:
  name: shellcheck
  preset: shellcheck
  includes:
    - "**/*.{bash,sh,shell}"
  check:
    command: "shellcheck --check-sourced --color=never --format=json --source-path=SCRIPTDIR --external-sources"
    input: variadic
    output: stdout
    format: json
    mapping:
      level: "{{ .level }}"
      path: "{{ .file }}"
      start_line: "{{ .line }}"
      start_column: "{{ .column }}"
      end_line: "{{ .endLine }}"
      end_column: "{{ .endColumn }}"
      rule_id: "SC{{ .code }}"
      rule_name: "SC{{ .code }}"
      rule_description: "{{ .message }}"
      rule_uri: "https://www.shellcheck.net/wiki/SC{{ .code }}"

shfmt:
  name: shfmt
  preset: shfmt
  tags: []
  includes:
    - "**/*.{bash,sh,shell}"
  check:
    command: "shfmt --diff"
    input: variadic
    output: stdout
    format: diff
  fix:
    command: "shfmt --write"
    input: variadic
    output: stdout
    format: none

terraform:
  name: terraform
  preset: terraform
  tags: []
  includes:
    - "**/*.{tf,tfvars}"
  check:
    command: "terraform fmt -check -diff"
    input: variadic
    output: stdout
    format: diff
  fix:
    command: "terraform fmt"
    input: variadic
    output: stdout
    format: none
